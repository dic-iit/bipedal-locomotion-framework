/**
 * @file bipedal_locomotion.cpp.in
 * @authors Giulio Romualdi, Diego Ferigo
 * @copyright 2020 Istituto Italiano di Tecnologia (IIT). This software may be modified and
 * distributed under the terms of the GNU Lesser General Public License v2.1 or any later version.
 */

#include <pybind11/pybind11.h>

#include <BipedalLocomotion/bindings/Math/Module.h>
#include <BipedalLocomotion/bindings/ParametersHandler/Module.h>

@cmakeif FRAMEWORK_COMPILE_Contact
#include <BipedalLocomotion/bindings/Contacts/Module.h>
@endcmakeif FRAMEWORK_COMPILE_Contact

@cmakeif FRAMEWORK_COMPILE_Planners
#include <BipedalLocomotion/bindings/Planners/Module.h>
@endcmakeif FRAMEWORK_COMPILE_Planners

@cmakeif FRAMEWORK_COMPILE_RobotInterfaceBindings
#include <BipedalLocomotion/bindings/RobotInterface/Module.h>
@endcmakeif FRAMEWORK_COMPILE_RobotInterfaceBindings

@cmakeif FRAMEWORK_USE_manif
#include <BipedalLocomotion/bindings/manif/Module.h>
@endcmakeif FRAMEWORK_USE_manif

@cmakeif FRAMEWORK_COMPILE_FloatingBaseEstimators
#include <BipedalLocomotion/bindings/FloatingBaseEstimators/Module.h>
@endcmakeif FRAMEWORK_COMPILE_FloatingBaseEstimators


// Create the Python module
PYBIND11_MODULE(bindings, m)
{
    namespace py = ::pybind11;
    using namespace BipedalLocomotion;

    m.doc() = "BipedalLocomotionFramework bindings";

    py::module_ parametersHandlerModule = m.def_submodule("parameters_handler");
    bindings::ParametersHandler::CreateModule(parametersHandlerModule);

    py::module_ mathModule = m.def_submodule("math");
    bindings::Math::CreateModule(mathModule);

    @cmakeif FRAMEWORK_USE_manif
    py::module_ manifModule = m.def_submodule("manif");
    bindings::manif::CreateModule(manifModule);
    @endcmakeif FRAMEWORK_USE_manif

    @cmakeif FRAMEWORK_COMPILE_Contact
    py::module_ contactsModule = m.def_submodule("contacts");
    bindings::Contacts::CreateModule(contactsModule);
    @endcmakeif FRAMEWORK_COMPILE_Contact

    @cmakeif FRAMEWORK_COMPILE_Planners
    py::module_ plannersModule = m.def_submodule("planners");
    bindings::Planners::CreateModule(plannersModule);
    @endcmakeif FRAMEWORK_COMPILE_Planners

    @cmakeif FRAMEWORK_COMPILE_RobotInterfaceBindings
    py::module_ robotInterfaceModule = m.def_submodule("robot_interface");
    bindings::RobotInterface::CreateModule(robotInterfaceModule);
    @endcmakeif FRAMEWORK_COMPILE_RobotInterfaceBindings

    @cmakeif FRAMEWORK_COMPILE_FloatingBaseEstimators
    py::module_ floatingBaseEstimatorModule = m.def_submodule("floating_base_estimators");
    bindings::FloatingBaseEstimators::CreateModule(floatingBaseEstimatorModule);
    @endcmakeif FRAMEWORK_COMPILE_FloatingBaseEstimators
}
